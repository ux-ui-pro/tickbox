{"mappings":";;;;;;;;;;;;AAAA,MAAM;IACI,kBAA0B;IAE1B,kBAAuC;IAE/C,YAAY,oBAA4B,oBAAoB,CAAE;QAC5D,IAAI,CAAC,iBAAiB,GAAG;QACzB,IAAI,CAAC,iBAAiB,GAAG,SAAS,gBAAgB,CAAC,IAAI,CAAC,iBAAiB;IAC3E;IAEO,OAAa;QAClB,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAChC;QAGF,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;YAC9B,MAAM,aAAiC,MAAM,IAAI,CAAC,UAAU,gBAAgB,CAAC;YAC7E,MAAM,SAA6B,MAAM,IAAI,CAAC,UAAU,gBAAgB,CAAC;YAEzE,8BAAQ,uBAAuB,CAAC;mBAAI;mBAAe;aAAO;YAE1D,UAAU,gBAAgB,CAAC,SAAS,CAAC;gBACnC,MAAM,SAAS,MAAM,MAAM;gBAE3B,IAAI,OAAO,IAAI,KAAK,cAAc,OAAO,IAAI,KAAK,SAChD,8BAAQ,2BAA2B,CAAC,QAAQ;YAEhD;QACF;IACF;IAEA,OAAe,wBAAwB,MAA0B,EAAQ;QACvE,OAAO,OAAO,CAAC,CAAC;YACd,MAAM,YAAY,CAAC,gBAAgB,MAAM,OAAO,CAAC,QAAQ;QAC3D;IACF;IAEA,OAAe,4BAA4B,KAAuB,EAAE,SAAkB,EAAQ;QAC5F,MAAM,YAAY,MAAM,YAAY,CAAC;QAErC,IAAI,WAAW;YACb,MAAM,cAAc,UAAU,gBAAgB,CAAC,CAAC,YAAY,EAAE,UAAU,EAAE,CAAC;YAE3E,YAAY,OAAO,CAAC,CAAC;gBACnB,WAAW,YAAY,CAAC,gBAAgB,AAAC,CAAA,eAAe,KAAI,EAAG,QAAQ;YACzE;QACF,OACE,MAAM,YAAY,CAAC,gBAAgB,MAAM,OAAO,CAAC,QAAQ;IAE7D;AACF;IAEA,2CAAe","sources":["src/index.ts"],"sourcesContent":["class Tickbox {\n  private containerSelector: string;\n\n  private tickboxContainers: NodeListOf<Element>;\n\n  constructor(containerSelector: string = '.tickbox-container') {\n    this.containerSelector = containerSelector;\n    this.tickboxContainers = document.querySelectorAll(this.containerSelector);\n  }\n\n  public init(): void {\n    if (!this.tickboxContainers.length) {\n      return;\n    }\n\n    this.tickboxContainers.forEach((container) => {\n      const checkboxes: HTMLInputElement[] = Array.from(container.querySelectorAll('input[type=\"checkbox\"]'));\n      const radios: HTMLInputElement[] = Array.from(container.querySelectorAll('input[type=\"radio\"]'));\n\n      Tickbox.addAriaCheckedAttribute([...checkboxes, ...radios]);\n\n      container.addEventListener('click', (event) => {\n        const target = event.target as HTMLInputElement;\n\n        if (target.type === 'checkbox' || target.type === 'radio') {\n          Tickbox.tickboxAriaCheckedAttribute(target, container);\n        }\n      });\n    });\n  }\n\n  private static addAriaCheckedAttribute(inputs: HTMLInputElement[]): void {\n    inputs.forEach((input) => {\n      input.setAttribute('aria-checked', input.checked.toString());\n    });\n  }\n\n  private static tickboxAriaCheckedAttribute(input: HTMLInputElement, container: Element): void {\n    const groupName = input.getAttribute('name');\n\n    if (groupName) {\n      const groupInputs = container.querySelectorAll(`input[name=\"${groupName}\"]`) as NodeListOf<HTMLInputElement>;\n\n      groupInputs.forEach((groupInput) => {\n        groupInput.setAttribute('aria-checked', (groupInput === input).toString());\n      });\n    } else {\n      input.setAttribute('aria-checked', input.checked.toString());\n    }\n  }\n}\n\nexport default Tickbox;\n"],"names":[],"version":3,"file":"index.js.map"}